{"version":3,"sources":["components/GameCard/GameCard.js","components/Wrapper/Wrapper.js","components/Title/Title.js","App.js","index.js"],"names":["GameCard","props","console","log","react_default","a","createElement","className","alt","name","src","image","onClick","handleClick","id","Wrapper","children","Title","App","state","images","score","topscore","message","shuffleData","data","i","length","j","Math","floor","random","_ref","handleCorrectGuess","newTopScore","newScore","_this","setState","handleIncorrectGuess","resetData","map","item","Object","objectSpread","clicked","handleCardClick","guessCorrect","updatedCards","currentCard","this","_this2","components_Wrapper_Wrapper","components_Title_Title","components_GameCard_GameCard","key","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"utFAceA,SAXE,SAAAC,GAEb,OADAC,QAAQC,IAAIF,GAEZG,EAAAC,EAAAC,cAAA,OAAKC,UAAY,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAKP,EAAMQ,KAAMC,IAAKT,EAAMU,MACjCC,QAAS,kBAAIX,EAAMY,YAAYZ,EAAMa,WCJlCC,SAFC,SAAAd,GAAK,OAAIG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWN,EAAMe,YCE1CC,SAFD,SAAAhB,GAAK,OAAIG,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAASN,EAAMe,mBC0FrCE,oNApFbC,MAAQ,CACNC,SACAC,MAAO,EACPC,SAAU,EACVC,QAAS,MAGXC,YAAc,SAAAC,GACZ,IAAK,IAAIC,EAAID,EAAKE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACxC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADFM,EAEnB,CAACP,EAAKG,GAAIH,EAAKC,IAAnCD,EAAKC,GAFkCM,EAAA,GAE9BP,EAAKG,GAFyBI,EAAA,GAI5C,OAAOP,KAOPQ,mBAAqB,SAAAR,GACnB,IACIS,EADEC,EAAWC,EAAKjB,MAAME,MAAO,EAGjCa,EADEC,EAAWC,EAAKjB,MAAMG,SACVa,EAEAC,EAAKjB,MAAMG,SAE3Bc,EAAKC,SAAS,CACZjB,OAAQgB,EAAKZ,YAAYC,GACzBJ,MAAOc,EACPb,SAAUY,OAIdI,qBAAuB,SAAAb,GACrB,IAAMc,EAAYd,EAAKe,IAAK,SAAAC,GAAI,OAAAC,OAAAC,EAAA,EAAAD,CAAA,GAASD,EAAT,CAAeG,SAAS,MACxDR,EAAKC,SAAS,CACZjB,OAAQmB,EACRlB,MAAO,OAIXwB,gBAAkB,SAAA/B,GAChBZ,QAAQC,IAAIW,GACZ,IAAIgC,GAAe,EACbC,EAAeX,EAAKjB,MAAMC,OAAOoB,IAAI,SAAA7B,GACzC,IAAMqC,EAAcrC,EAOpB,OANIqC,EAAYlC,KAAOA,IACO,IAAxBkC,EAAYJ,UACdI,EAAYJ,SAAU,EACtBE,GAAe,GAGZE,KAEY,IAAjBF,EACFV,EAAKH,mBAAmBc,GAExBX,EAAKE,qBAAqBS,uFA1C5BE,KAAKZ,SAAS,CAACjB,OAAQ6B,KAAKzB,YAAYyB,KAAK9B,MAAMC,2CA8C5C,IAAA8B,EAAAD,KACP,OACE7C,EAAAC,EAAAC,cAAC6C,EAAD,KACE/C,EAAAC,EAAAC,cAAC8C,EAAD,oBACchD,EAAAC,EAAAC,cAAA,WADd,cAEc2C,KAAK9B,MAAMG,SAFzB,IAEmClB,EAAAC,EAAAC,cAAA,WAFnC,UAGU2C,KAAK9B,MAAME,OAElB4B,KAAK9B,MAAMC,OAAOoB,IAAI,SAAA7B,GAAK,OAC1BP,EAAAC,EAAAC,cAAC+C,EAAD,CACEvC,GAAIH,EAAMG,GACVwC,IAAK3C,EAAMG,GACXL,KAAME,EAAMF,KACZE,MAAOA,EAAMA,MACbE,YAAaqC,EAAKL,4BA9EdU,oBCFlBC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.eae7558b.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./GameCard.css\";\n\nconst GameCard = props => {\n    console.log(props);\n    return (\n    <div className = \"card\">\n        <div className=\"img-container\">\n            <img alt={props.name} src={props.image}\n            onClick={()=>props.handleClick(props.id)} />\n        </div>\n    </div>\n)}\n\nexport default GameCard;","import React from \"react\";\r\nimport \"./Wrapper.css\";\r\n\r\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport \"./Title.css\";\r\n\r\nconst Title = props => <h1 className=\"title\">{props.children}</h1>;\r\n\r\nexport default Title;\r\n","import React, { Component } from 'react';\nimport GameCard from \"./components/GameCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport images from \"./images.json\";\nimport \"./App.css\";\n\nclass App extends Component {\n\n  state = {\n    images,\n    score: 0,\n    topscore: 0,\n    message: \"\"\n  };\n\n  shuffleData = data => {\n    for (let i = data.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [data[i], data[j]] = [data[j], data[i]];\n  }\n  return data;\n  }\n\n  componentDidMount(){\n    this.setState({images: this.shuffleData(this.state.images)});\n  }\n\n  handleCorrectGuess = data => {\n    const newScore = this.state.score +1;\n    let newTopScore;\n    if (newScore > this.state.topscore) {\n      newTopScore = newScore;\n    } else {\n      newTopScore = this.state.topscore;\n    }\n    this.setState({\n      images: this.shuffleData(data),\n      score: newScore,\n      topscore: newTopScore\n    });\n  }\n\n  handleIncorrectGuess = data => {\n    const resetData = data.map (item => ({...item, clicked: false}));\n    this.setState({\n      images: resetData,\n      score: 0\n    });\n  }\n\n  handleCardClick = id => {\n    console.log(id);\n    let guessCorrect = false;\n    const updatedCards = this.state.images.map(image => {\n      const currentCard = image;\n      if (currentCard.id === id) {\n        if (currentCard.clicked === false) {\n          currentCard.clicked = true;\n          guessCorrect = true;\n        }\n      }\n      return currentCard;\n    })\n    if (guessCorrect === true) {\n      this.handleCorrectGuess(updatedCards);\n    } else {\n      this.handleIncorrectGuess(updatedCards);\n    }\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        <Title> \n          Memory Game <br />\n          Top Score: {this.state.topscore} <br />\n          Score: {this.state.score}\n        </Title>\n          {this.state.images.map(image => (\n            <GameCard\n              id={image.id}\n              key={image.id}\n              name={image.name}\n              image={image.image}\n              handleClick={this.handleCardClick}\n            />\n          ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}